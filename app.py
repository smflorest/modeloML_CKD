import streamlit as st
import pandas as pd
import joblib
import os

# Imagen y t√≠tulo
st.set_page_config(page_title="Predicci√≥n CKD", layout="centered")

st.markdown("""
    <div style="display: flex; align-items: center;">
        <img src="https://cancuncancerinstitute.com/wp-content/uploads/2023/02/Portada-datos-sobre-el-cancer-de-rinon.png" 
             alt="Ri√±√≥n" width="160" style="margin-right: 40px;">
        <h1>Enfermedad Renal Cr√≥nica (CKD)</h1>
    </div>
""", unsafe_allow_html=True)

st.title("üß† Modelo de Predicci√≥n de Enfermedad Renal Cr√≥nica (CKD)")

# Descripci√≥n
st.markdown("""
Esta aplicaci√≥n permite predecir si un paciente tiene **Enfermedad Renal Cr√≥nica (CKD)** 
o no (**notckd**) usando un modelo de clasificaci√≥n: √Årbol de Decisi√≥n (exactitud 0.97) 
basado en el dataset de UCI Irvine.
""")

st.write("NOTA: Esta aplicaci√≥n es con fines educativos, no cl√≠nicos.")

# Selecci√≥n de modelo
model_option = st.selectbox("üì¶ Selecciona el modelo a usar:",
                            ("decision_tree_model.pkl", "best_decision_tree_model.pkl"))
model_path = os.path.join(os.getcwd(), model_option)
if os.path.exists(model_path):
    model = joblib.load(model_path)
else:
    st.error(f"El modelo '{model_option}' no se encuentra en el directorio.")
    st.stop()

# Definir columnas
column_info = {
    'age': ("Edad", "a√±os", "num√©rico"),
    'bp': ("Presi√≥n arterial", "mm Hg", "entero"),
    'sg': ("Gravedad espec√≠fica (sg)", "g/mL", "num√©rico"),
    'al': ("Prote√≠nas en orina (albumina)", "categor√≠a: 0‚Äì5", "entero"),
    'su': ("Az√∫car en orina", "categor√≠a: 0‚Äì5", "entero"),
    'rbc': ("Gl√≥bulos rojos", ["normal", "abnormal"]),
    'pc': ("C√©lulas epiteliales", ["normal", "abnormal"]),
    'pcc': ("Cilindros celulares", ["notpresent", "present"]),
    'ba': ("Bacterias", ["notpresent", "present"]),
    'bgr': ("Nivel de glucosa en sangre (bgr)", "mg/dL", "num√©rico"),
    'bu': ("Urea en sangre", "mg/dL", "num√©rico"),
    'sc': ("Creatinina s√©rica", "mg/dL", "num√©rico"),
    'sod': ("Sodio s√©rico", "mEq/L", "num√©rico"),
    'pot': ("Potasio s√©rico", "mEq/L", "num√©rico"),
    'hemo': ("Hemoglobina", "g/dL", "num√©rico"),
    'pcv': ("Volumen corpuscular", "%", "num√©rico"),
    'wbcc': ("Recuento de leucocitos", "c√©lulas/¬µL", "num√©rico"),
    'rbcc': ("Recuento de eritrocitos", "millones/¬µL", "num√©rico"),
    'htn': ("Hipertensi√≥n", ["yes", "no"]),
    'dm': ("Diabetes", ["yes", "no"]),
    'cad': ("Enfermedad card√≠aca", ["yes", "no"]),
    'appet': ("Apetito", ["good", "poor"]),
    'pe': ("Presencia de edema", ["yes", "no"]),
    'ane': ("Anemia", ["yes", "no"])
}

# Formulario de entrada
st.subheader("üìù Ingreso de datos cl√≠nicos")
input_data = {}

for col, info in column_info.items():
    label = info[0]
    if isinstance(info[1], list):  # Categ√≥rico
        input_data[col] = st.selectbox(f"**{label}**", options=info[1])
    else:  # Num√©rico
        tipo = info[2] if len(info) > 2 else "num√©rico"
        step = 1 if tipo == "entero" else 0.1
        input_data[col] = st.number_input(f"**{label}** ({info[1]}, {tipo})", step=step)

# Bot√≥n de predicci√≥n
if st.button("üîç Predecir"):
    try:
        # Crear DataFrame y aplicar get_dummies
        input_df = pd.DataFrame([input_data])
        input_df = pd.get_dummies(input_df)

        # Asegurar columnas del modelo
        for col in model.feature_names_in_:
            if col not in input_df.columns:
                input_df[col] = 0
        input_df = input_df[model.feature_names_in_]  # Reordenar columnas

        # Predicci√≥n
        prediction = model.predict(input_df)[0]
        resultado = "‚úÖ NO tiene CKD (notckd)" if prediction == 1 else "‚ö†Ô∏è Tiene CKD (ckd)"
        st.success(f"Resultado de la predicci√≥n: {resultado}")

        with st.expander("üìã Ver datos ingresados"):
            st.dataframe(pd.DataFrame([input_data]))

    except Exception as e:
        st.error(f"Error al hacer la predicci√≥n: {e}")

# Footer
st.markdown("""
    <div style='position: fixed; bottom: 10px; left: 20px; text-align: right; color: gray; font-size: 14px;'>
        <p><b>Integrantes:</b><br>
        Silvia Flores Toledo<br>
        Sarina Ramos Zuniga<br>
        Jose C Jara Aguirre<br>
        Vladimir Villoslada Terrones<br>
        Jose Luis Vargas</p>
    </div>
""", unsafe_allow_html=True)
